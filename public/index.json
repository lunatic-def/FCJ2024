[
{
	"uri": "http://localhost:1313/FCJ2024/v-cognito/user-pools-api/terraform_script/",
	"title": "Case 1 demo",
	"tags": [],
	"description": "",
	"content": "1. Create and config user pools\nCase 1 demo with Cognito only Hosted UI and OAuth Server All of these configuration is the same as the manual config page resource \u0026#34;aws_cognito_user_pool\u0026#34; \u0026#34;user_pool\u0026#34; {\rname = \u0026#34;user_pool\u0026#34;\rusername_configuration {\rcase_sensitive = true\r}\ralias_attributes = [\u0026#34;email\u0026#34;]\r# password_policy {\r# minimum_length = 6\r# }\r#mfa_configuration = \u0026#34;OFF\u0026#34; default\rverification_message_template {\rdefault_email_option = \u0026#34;CONFIRM_WITH_CODE\u0026#34;\remail_subject = \u0026#34;Account Confirmation\u0026#34;\remail_message = \u0026#34;Your confirmation code is {####}\u0026#34;\r}\remail_configuration {\remail_sending_account = \u0026#34;COGNITO_DEFAULT\u0026#34;\r}\rschema {\rattribute_data_type = \u0026#34;String\u0026#34;\rdeveloper_only_attribute = false\rmutable = true\rname = \u0026#34;email\u0026#34;\rrequired = true\rstring_attribute_constraints {\rmin_length = 1\rmax_length = 256\r}\r}\raccount_recovery_setting {\rrecovery_mechanism {\rname = \u0026#34;verified_email\u0026#34;\rpriority = 1\r}\r}\r#Set to False if users can sign themselves up via an app. (base on APP need)\radmin_create_user_config {\rallow_admin_create_user_only = false\r}\r# verifying attribute changes\rauto_verified_attributes = [\u0026#34;email\u0026#34;]\ruser_attribute_update_settings {\rattributes_require_verification_before_update = [\u0026#34;email\u0026#34;]\r}\r} Cognitor default domain for authentication (Identity provider) #Cognitor domain for testing resource \u0026#34;aws_cognito_user_pool_domain\u0026#34; \u0026#34;main\u0026#34; {\rdomain = \u0026#34;myupool\u0026#34;\ruser_pool_id = aws_cognito_user_pool.user_pool.id\r}\r#Cognito authentication hosted UI\rresource \u0026#34;aws_cognito_user_pool_ui_customization\u0026#34; \u0026#34;example\u0026#34; {\rcss = \u0026#34;.label-customizable {font-weight: 400;}\u0026#34;\r# Refer to the aws_cognito_user_pool_domain resource\u0026#39;s\r# user_pool_id attribute to ensure it is in an \u0026#39;Active\u0026#39; state\ruser_pool_id = aws_cognito_user_pool_domain.main.user_pool_id\r} Resource pool for OAuth 2.0 Client resource \u0026#34;aws_cognito_resource_server\u0026#34; \u0026#34;resource\u0026#34; {\ridentifier = \u0026#34;api_server\u0026#34; #for test\rname = \u0026#34;api_server\u0026#34;\ruser_pool_id = aws_cognito_user_pool.user_pool.id\rscope {\rscope_name = \u0026#34;read\u0026#34;\rscope_description = \u0026#34;get all items\u0026#34;\r}\r} 2. Create and config client pools\nCreate a user pool client with Cognito as the identity provider is Cognito API request made from user systems that are not trusted with a client secret resource \u0026#34;aws_cognito_user_pool_client\u0026#34; \u0026#34;client\u0026#34; {\rname = \u0026#34;client_pool\u0026#34;\rcallback_urls = [\u0026#34;https://aws.training\u0026#34;] #after sign in success you will be redirect to this urls\rlogout_urls = [\u0026#34;https://localhost\u0026#34;] # urls for logout redirect\rallowed_oauth_flows_user_pool_client = true\rallowed_oauth_flows = [\u0026#34;code\u0026#34;, \u0026#34;implicit\u0026#34;]\rallowed_oauth_scopes = [\u0026#34;profile\u0026#34;, \u0026#34;openid\u0026#34;]\rsupported_identity_providers = [\u0026#34;COGNITO\u0026#34;]\ruser_pool_id = aws_cognito_user_pool.user_pool.id\rgenerate_secret = true # for testing\rrefresh_token_validity = 90\rprevent_user_existence_errors = \u0026#34;ENABLED\u0026#34;\rexplicit_auth_flows = [\r\u0026#34;ALLOW_REFRESH_TOKEN_AUTH\u0026#34;,\r\u0026#34;ALLOW_USER_SRP_AUTH\u0026#34;,\r\u0026#34;ALLOW_ADMIN_USER_PASSWORD_AUTH\u0026#34;\r]\r} "
},
{
	"uri": "http://localhost:1313/FCJ2024/iv-cloudwatch/cloudwatch-alb/",
	"title": "CloudWatch ALB",
	"tags": [],
	"description": "",
	"content": "Define CloudWatch Alarms for ALB\n# examine the available cloudwatch metric # Alert if HTTP 4xx errors are more than threshold value\rresource \u0026#34;aws_cloudwatch_metric_alarm\u0026#34; \u0026#34;alb_4xx_errors\u0026#34; {\ralarm_name = \u0026#34;App1-ALB-HTTP-4xx-errors\u0026#34;\rcomparison_operator = \u0026#34;GreaterThanThreshold\u0026#34;\rdatapoints_to_alarm = \u0026#34;2\u0026#34; # \u0026#34;2\u0026#34;\revaluation_periods = \u0026#34;3\u0026#34; # \u0026#34;3\u0026#34;\rmetric_name = \u0026#34;HTTPCode_Target_4XX_Count\u0026#34;\rnamespace = \u0026#34;AWS/ApplicationELB\u0026#34;\rperiod = \u0026#34;120\u0026#34;\rstatistic = \u0026#34;Sum\u0026#34;\rthreshold = \u0026#34;5\u0026#34; # Update real-world value like 100, 200 etc\rtreat_missing_data = \u0026#34;missing\u0026#34; dimensions = {\rLoadBalancer = module.alb.arn_suffix\r}\ralarm_description = \u0026#34;This metric monitors ALB HTTP 4xx errors and if they are above 100 in specified interval, it is going to send a notification email\u0026#34;\rok_actions = [aws_sns_topic.myasg_sns_topic.arn] alarm_actions = [aws_sns_topic.myasg_sns_topic.arn]\r}\r# Per AppELB Metrics\r## - HTTPCode_ELB_5XX_Count\r## - HTTPCode_ELB_502_Count\r## - TargetResponseTime\r# Per AppELB, per TG Metrics\r## - UnHealthyHostCount\r## - HealthyHostCount\r## - HTTPCode_Target_4XX_Count\r## - TargetResponseTime "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/5-auto_scaling/5.1-launchtemplate/",
	"title": "Create Launch Template",
	"tags": [],
	"description": "",
	"content": " Launch template resource # Launch Template Resource\rresource \u0026#34;aws_launch_template\u0026#34; \u0026#34;my_launch_template\u0026#34; {\rname = \u0026#34;launch-template\u0026#34;\rdescription = \u0026#34;My Launch Template\u0026#34;\rimage_id = data.aws_ami.amzlinux2.id\rinstance_type = var.instance_type\rvpc_security_group_ids = [module.private-secgroup.security_group_id]\rkey_name = var.instance_keypair #user_data = filebase64(\u0026#34;${path.module}/script.sh\u0026#34;)\ruser_data = base64encode(templatefile(\u0026#34;${path.module}/script.tmpl\u0026#34;,{rds_db_endpoint = module.master.db_instance_address})) ebs_optimized = false # not support for t2.micro/ t3.micro uwu\r#default_version = 1\rupdate_default_version = true\r# block_device_mappings {\r# device_name = \u0026#34;/dev/sda1\u0026#34;\r# ebs {\r# volume_size = 10 # delete_on_termination = true\r# volume_type = \u0026#34;gp2\u0026#34; # default is gp2\r# }\r# }\rmonitoring {\renabled = false\r}\rtag_specifications {\rresource_type = \u0026#34;instance\u0026#34;\rtags = {\rName = \u0026#34;private_instance\u0026#34;\r}\r}\r} Template for automating script for Web server -\u0026gt; PHP website, apache2 #! /bin/bash\rsudo yum update -y\rsudo yum install git -y\rsudo yum install php php-pdo php-mysql -y\rsudo yum install php-pdo php-mysqlnd -y\rsudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\rsudo yum install -y httpd\rsudo systemctl start httpd\rsudo systemctl enable httpd\rsudo usermod -a -G apache ec2-user\rsudo chown -R ec2-user:apache /var/www\rcd /var/www\rgit clone https://github.com/lunatic-def/temp.git\rmkdir inc\rmv /var/www/temp/db_config.inc /var/www/inc\rmv /var/www/temp/Website.php /var/www/html\rsudo systemctl restart httpd "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/2-prerequiste/2.1-createec2/2.1.1-createvpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Create VPC Lab VPC VPC module for creating VPC with all the necessary components:\nVPC module a) Declare variable for VPC\nvariable \u0026#34;create_vpc\u0026#34; {\rdescription = \u0026#34;Controls if VPC should be created (it affects almost all resources)\u0026#34;\rtype = bool\rdefault = true\r}\rvariable \u0026#34;name\u0026#34; {\rdescription = \u0026#34;Name to be used on all the resources as identifier\u0026#34;\rtype = string\rdefault = \u0026#34;Workshop01_VPC\u0026#34;\r}\r#CIDR block\rvariable \u0026#34;cidr\u0026#34; {\rdescription = \u0026#34;(Optional) The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4_netmask_length` \u0026amp; `ipv4_ipam_pool_id`\u0026#34;\rtype = string\rdefault = \u0026#34;10.0.0.0/16\u0026#34;\r}\r# availability zones\rvariable \u0026#34;azs\u0026#34; {\rdescription = \u0026#34;A list of availability zones names or ids in the region\u0026#34;\rtype = list(string)\rdefault = [\u0026#34;us-east-1a\u0026#34;, \u0026#34;us-east-1b\u0026#34;]\r}\r# VPC Public Subnets\rvariable \u0026#34;vpc_public_subnets\u0026#34; {\rdescription = \u0026#34;VPC Public Subnets\u0026#34;\rtype = list(string)\rdefault = [\u0026#34;10.0.101.0/24\u0026#34;,\u0026#34;10.0.102.0/24\u0026#34;]\r}\r# VPC Private Subnets\rvariable \u0026#34;vpc_private_subnets\u0026#34; {\rdescription = \u0026#34;VPC Private Subnets\u0026#34;\rtype = list(string)\rdefault = [\u0026#34;10.0.1.0/24\u0026#34;, \u0026#34;10.0.2.0/24\u0026#34;]\r}\r# VPC Database Subnets\rvariable \u0026#34;vpc_database_subnets\u0026#34; {\rdescription = \u0026#34;VPC Private Subnets\u0026#34;\rtype = list(string)\rdefault = [\u0026#34;10.0.3.0/24\u0026#34;, \u0026#34;10.0.4.0/24\u0026#34;]\r} b) Create VPC module\nmodule \u0026#34;vpc\u0026#34; {\rsource = \u0026#34;terraform-aws-modules/vpc/aws\u0026#34;\rversion = \u0026#34;5.5.1\u0026#34;\r#Asset VPC Details\rname = var.name\rcidr = var.cidr\razs = var.azs\rprivate_subnets = var.vpc_private_subnets\rpublic_subnets = var.vpc_public_subnets\rdatabase_subnets = var.vpc_database_subnets\r# VPC DNS Parameters\renable_dns_hostnames = true\renable_dns_support = true\r# NAT gateway\renable_nat_gateway = true\rpublic_subnet_tags = {\rType = \u0026#34;Public Subnets\u0026#34;\r}\rprivate_subnet_tags = {\rType = \u0026#34;Private Subnets\u0026#34;\r} database_subnet_tags = {\rType = \u0026#34;Database Subnets\u0026#34;\r}\r} c) Output VPC value\n# VPC ID\routput \u0026#34;vpc_id\u0026#34; {\rdescription = \u0026#34;The ID of the VPC\u0026#34;\rvalue = module.vpc.vpc_id\r}\r# VPC Private Subnets\routput \u0026#34;private_subnets\u0026#34; {\rdescription = \u0026#34;List of IDs of private subnets\u0026#34;\rvalue = module.vpc.private_subnets\r}\r# VPC Public Subnets\routput \u0026#34;public_subnets\u0026#34; {\rdescription = \u0026#34;List of IDs of public subnets\u0026#34;\rvalue = module.vpc.public_subnets\r}\r# VPC AZs\routput \u0026#34;azs\u0026#34; {\rdescription = \u0026#34;A list of availability zones spefified as argument to this module\u0026#34;\rvalue = module.vpc.azs\r} "
},
{
	"uri": "http://localhost:1313/FCJ2024/i-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "In this work shop you will learn about creating a secure web service with MySQL database on AWS platform using terraform for automation of IAC (infrastructor as code).\nVPC: 2 nat, 2 azs, 2 public subnets, 4 private subnets EC2: 1 Bastion instance 2 Private instances 2 RDS database (MySQL) Services: Application load balencer, Auto-scaling, Launch templates, S3, Elastic IP address (EIP), Route53 Monitoring and Security: Cloudwatch SNS - Simple notification service KMS - Key management service CloudHSM IAM - Identity access management ACM - Application certificate manager AWS Cognito (demo version only) Remote state file with state locking for preventing conflict during development "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/7-rds/7.1rds_sg/",
	"title": "RDS MYSQL Security group",
	"tags": [],
	"description": "",
	"content": " Port 3306 for MySQL server connection\n# Security Group for AWS RDS DB\rmodule \u0026#34;rdsdb_sg\u0026#34; {\rsource = \u0026#34;terraform-aws-modules/security-group/aws\u0026#34;\rversion = \u0026#34;5.1.0\u0026#34;\rname = \u0026#34;rdsdb-sg\u0026#34;\rdescription = \u0026#34;Access to MySQL DB for entire VPC CIDR Block\u0026#34;\rvpc_id = module.vpc.vpc_id\r# ingress\ringress_with_cidr_blocks = [\r{\rfrom_port = 3306\rto_port = 3306\rprotocol = \u0026#34;tcp\u0026#34;\rdescription = \u0026#34;MySQL access from within VPC\u0026#34;\rcidr_blocks = module.vpc.vpc_cidr_block\r},\r]\r# Egress Rule - all-all open\regress_rules = [\u0026#34;all-all\u0026#34;]\rtags = { name = \u0026#34;rds_secgroup\u0026#34; }\r} "
},
{
	"uri": "http://localhost:1313/FCJ2024/v-cognito/identity-pools-sdk/terraform_script/",
	"title": "Terraform script",
	"tags": [],
	"description": "",
	"content": "In Process\u0026hellip; "
},
{
	"uri": "http://localhost:1313/FCJ2024/v-cognito/user-pools-api/",
	"title": "User-pools API",
	"tags": [],
	"description": "",
	"content": "User-Pool API\nAn Amazon Cognito user pool is a user directory for web and mobile app authentication and authorization.\nFrom the perspective of your app, an Amazon Cognito user pool is an OpenID Connect (OIDC) identity provider (IdP) Your app users can sign in either directly through a user pool, or federate through a third-party identity provider (IdP). A user pool adds layers of additional features for security, identity federation, app integration, and customization of the user experience. Verify use\u0026rsquo;s session are from trusted sources\nCombine Cognito with external identity provider With AWS SDK -\u0026gt; choose API authorization model Add Lambda func to modify the default behavior of Cognitor Authentication flow:\nPublic authentication: InitiateAuth -\u0026gt; RespondtoAuthChallenge Sever-side authentication: AdminInitiateAuth -\u0026gt; AdminRespondToAuthChallenge Case 1: User pool authentication flow Your app prompts your user for their username and password. You include the username and password as parameters in InitiateAuth. Amazon Cognito returns an SMS_MFA challenge and a session identifier. Your app prompts your user for the MFA code from their phone. You include that code and the session identifier in the RespondToAuthChallenge request. Case 2:Adding sign-in through a third party\nSUMMARY:\nAmazon Cognito user pool (OAuth 2.0 IdP) - when sign in as local user to the Amazon Cognito directory without federation through an external IdP\nAmazon Cognito user pool (SP) to IdP - social, SAML (Security Assertion Markup Language) or OpenID Connect(OIDC) - user pool acts as a bridge between multiple service provider and your app.\nUser app \u0026lt;-- Amazon Cognito user pool (SP) \u0026lt;-- IdP\r=\u0026gt; Your IdPs pass an OIDC ID token or a SAML assertion to Amazon Cognito. Amazon Cognito reads the claims about your user in the token or assertion and maps those claims to a new user profile in your user pool directory\nUser app -- Amazone Cognito user pool (IdP) with authenticated user profile from external IdP (OIDC and social identity providers, an IdP-operated public userinfo endpoint)\r=\u0026gt; Amazon Cognito then creates a user profile for your federated user in its own directory. Amazon Cognito adds attributes to your user based on the claims from your IdP and, in the case of OIDC and social identity providers, an IdP-operated public userinfo endpoint. Your user\u0026rsquo;s attributes change in your user pool when a mapped IdP attribute changes. You can also add more attributes independent of those from the IdP. =\u0026gt; After Amazon Cognito creates a profile for your federated user, it changes its function and presents itself as the IdP to your app, which is now the SP. Amazon Cognito is a combination OIDC and OAuth 2.0 IdP. It generates access tokens, ID tokens, and refresh tokens.\nAdding social identity providers to a user pool Adding SAML providers You can choose to have your web and mobile app users sign in through a SAML(Security Assertion Markup Language) identity provider (IdP) like Microsoft Active Directory Federation Services (ADFS), or Shibboleth. You must choose a SAML IdP which supports the SAML 2.0 standard.\nWith the hosted UI and federation endpoints, Amazon Cognito authenticates local and third-party IdP users and issues JSON web tokens (JWTs). With the tokens that Amazon Cognito issues, you can consolidate multiple identity sources into a universal OpenID Connect (OIDC) standard across all of your apps. Amazon Cognito can process SAML assertions from your third-party providers into that SSO standard. You can create and manage a SAML IdP in the AWS Management Console, through the AWS CLI, or with the Amazon Cognito user pools API. To create your first SAML IdP in the AWS Management Console, see Adding and managing SAML identity providers in a user pool.\nAdding OIDC providers OIDC is an identity layer on top of OAuth 2.0, which specifies JSON-formatted (JWT) identity tokens that are issued by IdPs to OIDC client apps (relying parties)\nWhen your user signs in to your application using an OIDC IdP, they pass through the following authentication flow. Your user lands on the Amazon Cognito built-in sign-in page, and is offered the option to sign in through an OIDC IdP such as Salesforce. Your user is redirected to the authorization endpoint of the OIDC IdP. After your user is authenticated, the OIDC IdP redirects to Amazon Cognito with an authorization code. Amazon Cognito exchanges the authorization code with the OIDC IdP for an access token. Amazon Cognito creates or updates the user account in your user pool. Amazon Cognito issues your application bearer tokens, which might include identity, access, and refresh tokens. "
},
{
	"uri": "http://localhost:1313/FCJ2024/",
	"title": "WorkShop 01",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/FCJ2024/iv-cloudwatch/cloudwatch-canary-syn/",
	"title": "CloudWatch Canary Syn",
	"tags": [],
	"description": "",
	"content": "IAM policy for managing cloudwatch Canary Synthetic -\u0026gt; S3 logs, Cloudwatch\n# AWS IAM Policy\rresource \u0026#34;aws_iam_policy\u0026#34; \u0026#34;cw_canary_iam_policy\u0026#34; {\rname = \u0026#34;cw-canary-iam-policy\u0026#34;\rpath = \u0026#34;/\u0026#34;\rdescription = \u0026#34;CloudWatch Canary Synthetic IAM Policy\u0026#34;\r# Terraform\u0026#39;s \u0026#34;jsonencode\u0026#34; function converts a\r# Terraform expression result to valid JSON syntax.\rpolicy = jsonencode({\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;VisualEditor0\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;cloudwatch:PutMetricData\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Condition\u0026#34;: {\r\u0026#34;StringEquals\u0026#34;: {\r\u0026#34;cloudwatch:namespace\u0026#34;: \u0026#34;CloudWatchSynthetics\u0026#34;\r}\r}\r},\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;VisualEditor1\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;s3:PutObject\u0026#34;,\r\u0026#34;logs:CreateLogStream\u0026#34;,\r\u0026#34;s3:ListAllMyBuckets\u0026#34;,\r\u0026#34;logs:CreateLogGroup\u0026#34;,\r\u0026#34;logs:PutLogEvents\u0026#34;,\r\u0026#34;s3:GetBucketLocation\u0026#34;,\r\u0026#34;xray:PutTraceSegments\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r})\r}\r# AWS IAM Role\rresource \u0026#34;aws_iam_role\u0026#34; \u0026#34;cw_canary_iam_role\u0026#34; {\rname = \u0026#34;cw-canary-iam-role\u0026#34;\rdescription = \u0026#34;CloudWatch Synthetics lambda execution role for running canaries\u0026#34;\rpath = \u0026#34;/service-role/\u0026#34;\r#assume_role_policy = data.aws_iam_policy_document.instance_assume_role_policy.json # (not shown)\rassume_role_policy = \u0026#34;{\\\u0026#34;Version\\\u0026#34;:\\\u0026#34;2012-10-17\\\u0026#34;,\\\u0026#34;Statement\\\u0026#34;:[{\\\u0026#34;Effect\\\u0026#34;:\\\u0026#34;Allow\\\u0026#34;,\\\u0026#34;Principal\\\u0026#34;:{\\\u0026#34;Service\\\u0026#34;:\\\u0026#34;lambda.amazonaws.com\\\u0026#34;},\\\u0026#34;Action\\\u0026#34;:\\\u0026#34;sts:AssumeRole\\\u0026#34;}]}\u0026#34; managed_policy_arns = [aws_iam_policy.cw_canary_iam_policy.arn]\r} Canary role creation and policy AWS CloudWatch Canary resource \u0026#34;aws_synthetics_canary\u0026#34; \u0026#34;sswebsite2\u0026#34; {\rname = \u0026#34;sswebsite2\u0026#34;\rartifact_s3_location = \u0026#34;s3://${module.s3_bucket.s3_bucket_id}/sswebsite2\u0026#34;\rexecution_role_arn = aws_iam_role.cw_canary_iam_role.arn handler = \u0026#34;sswebsite2.handler\u0026#34;\rzip_file = \u0026#34;sswebsite2/sswebsite2.zip\u0026#34; #zip_file = filebase64(\u0026#34;${path.module}/sswebsite2/sswebsite2v1.zip\u0026#34;)\rruntime_version = \u0026#34;syn-nodejs-puppeteer-7.0\u0026#34;\rstart_canary = true\rrun_config {\ractive_tracing = true\rmemory_in_mb = 960\rtimeout_in_seconds = 60\r}\rschedule {\rexpression = \u0026#34;rate(1 minute)\u0026#34;\r}\r} canary log canary screenshot of web page canary S3 log storage blocking public access \u0026ldquo;sswebsite2\u0026rdquo; for cloudwatch canary UI. "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/5-auto_scaling/5.2-auto_scaling/",
	"title": "Create Auto Scaling Group resource",
	"tags": [],
	"description": "",
	"content": " Auto-scaling resource resource \u0026#34;aws_autoscaling_group\u0026#34; \u0026#34;my_asg\u0026#34; {\r# auto scaling group auto matically create new instance when deploy without associating the previous instance so\r# no need to use Web server module\rdepends_on = [ module.vpc, module.master ] # should create the db first for connection\rname_prefix = \u0026#34;myasg-\u0026#34;\rdesired_capacity = 2\rmax_size = 2\rmin_size = 2\rvpc_zone_identifier = module.vpc.private_subnets\r# assign to ALB target group\rtarget_group_arns = [module.alb.target_groups[\u0026#34;mytg1\u0026#34;].arn] health_check_type = \u0026#34;EC2\u0026#34;\r#health_check_grace_period = 300 # default is 300 seconds # Launch Template\rlaunch_template {\rid = aws_launch_template.my_launch_template.id\rversion = aws_launch_template.my_launch_template.latest_version\r}\rinstance_maintenance_policy {\rmin_healthy_percentage = 60\rmax_healthy_percentage = 100\r}\r# Instance Refresh\rinstance_refresh {\rstrategy = \u0026#34;Rolling\u0026#34;\rpreferences {\rinstance_warmup = 300 # Default behavior is to use the Auto Scaling Group\u0026#39;s health check grace period.\rmin_healthy_percentage = 50\r}\rtriggers = [ /*\u0026#34;launch_template\u0026#34;,*/ \u0026#34;desired_capacity\u0026#34; ] # You can add any argument from ASG here, if those has changes, ASG Instance Refresh will trigger\r} tag {\rkey = \u0026#34;Owners\u0026#34;\rvalue = \u0026#34;Web-Team\u0026#34;\rpropagate_at_launch = true\r} }\routput \u0026#34;zz\u0026#34; {\rvalue= aws_autoscaling_group.my_asg.target_group_arns\r} "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/2-prerequiste/2.1-createec2/2.1.2-createsecgroup/",
	"title": "Create security groups",
	"tags": [],
	"description": "",
	"content": "Create security groups In this step, we will proceed to create the security groups used for our instances. As you can see, these security groups will not need to open traditional ports to ssh like port 22, MySQL through port 3306 and CloudHSM through port 2221 - 2225\nCreate security group for Linux instance located in public subnet Security group module for Public, Private and Databse subnets\nSecurity group module Public security group: module \u0026#34;bastion-secgroup\u0026#34; {\rsource = \u0026#34;terraform-aws-modules/security-group/aws\u0026#34;\rversion = \u0026#34;5.1.0\u0026#34;\r#SSH -\u0026gt; 0.0.0.0/0\r#HSM/EC2 -\u0026gt; Internal\rname = \u0026#34;bastion-sg\u0026#34;\rdescription = \u0026#34;Security group which is used as an argument in complete-sg\u0026#34;\rvpc_id = module.vpc.vpc_id\r# SSH to internal and external instances\ringress_cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\ringress_rules = [\u0026#34;ssh-tcp\u0026#34;]\r# Connect to CloudHSM service internal\ringress_with_cidr_blocks = [\r{\rfrom_port = 2221\rto_port = 2225\rprotocol = \u0026#34;tcp\u0026#34;\rdescription = \u0026#34;Allow Port 2225 to connect to CloudHSM\u0026#34;\rcidr_blocks = module.vpc.vpc_cidr_block\r},\r]\regress_rules = [\u0026#34;all-all\u0026#34;]\rtags = {\rname = \u0026#34;Bastion Security Group\u0026#34;\r}\r} Private security group: module \u0026#34;private-secgroup\u0026#34; {\rsource = \u0026#34;terraform-aws-modules/security-group/aws\u0026#34;\rversion = \u0026#34;5.1.0\u0026#34;\rname = \u0026#34;private-sg\u0026#34;\rdescription = \u0026#34;Security group which is used as an argument in complete-sg\u0026#34;\rvpc_id = module.vpc.vpc_id\r# ALB and SSH internal connection\ringress_rules = [\u0026#34;http-8080-tcp\u0026#34;, \u0026#34;ssh-tcp\u0026#34;,\u0026#34;http-80-tcp\u0026#34;]\ringress_cidr_blocks = [module.vpc.vpc_cidr_block]\regress_rules = [\u0026#34;all-all\u0026#34;]\rtags = {\rname = \u0026#34;Private Security Group\u0026#34;\r}\r} "
},
{
	"uri": "http://localhost:1313/FCJ2024/v-cognito/identity-pools-sdk/",
	"title": "Identity-pools SDK",
	"tags": [],
	"description": "",
	"content": "SUMMARY\nDirectory pools of federated identities -\u0026gt; exchange for AWS credentials\n=\u0026gt; BY generating temporary credentials AWS cre for users of your app (signed in or not)\nIAM for choosing the level of permission that you want to grant to your users\n=\u0026gt; CAN start out as a GUESTS.\n=\u0026gt; Signed in with a third-party IdP to unlock access to assets that you make available to registered members.\nFeatures of Amazon Cognito identity pools Sign requests for AWS services Sign API requests to AWS services like Amazon Simple Storage Service (Amazon S3) and Amazon DynamoDB. Analyze user activity with services like Amazon Pinpoint and Amazon CloudWatch.\nFilter requests with resource-based policies Exercise granular control over user access to your resources. Transform user claims into IAM session tags, and build IAM policies that grant resource access to distinct subsets of your users.\nAssign guest access For your users who haven’t signed in yet, configure your identity pool to generate AWS credentials with a narrow scope of access. Authenticate users through a single sign-on provider to elevate their access.\nAssign IAM roles based on user characteristics Assign a single IAM role to all of your authenticated users, or choose the role based on the claims of each user.\nAccept a variety of identity providers Exchange an ID or access token, a user pool token, a SAML assertion, or a social-provider OAuth token for AWS credentials.\nValidate your own identities Perform your own user validation and use your developer AWS credentials to issue credentials for your users.\n"
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "To learn how to use terraform provider AWS:\nAWS Provider\nDefine terraform version\nterraform {\rrequired_version = \u0026#34;\u0026gt;= 1.6\u0026#34; # which means any version equal \u0026amp; above 0.14 like 0.15, 0.16 etc and \u0026lt; 1.xx\rrequired_providers {\raws = {\rsource = \u0026#34;hashicorp/aws\u0026#34;\rversion = \u0026#34;\u0026gt;= 5.0\u0026#34;\r}\rnull = {\rsource = \u0026#34;hashicorp/null\u0026#34;\rversion = \u0026#34;~\u0026gt; 3.0\u0026#34;\r} }\r} Define Provider\nThe \u0026ldquo;access key\u0026rdquo; and \u0026ldquo;secret key\u0026rdquo; is located in your account security credential This lab will use only \u0026ldquo;us-east-1\u0026rdquo; region # Provider AWS\rprovider \u0026#34;aws\u0026#34; {\rregion = var.aws_region\raccess_key = \u0026#34;\u0026#34;\rsecret_key = \u0026#34;\u0026#34;\r}\r# AWS Region\rvariable \u0026#34;aws_region\u0026#34; {\rdescription = \u0026#34;Region in which AWS Resources to be created\u0026#34;\rtype = string\rdefault = \u0026#34;us-east-1\u0026#34; } Content Create VPC Create security group Create EC2 "
},
{
	"uri": "http://localhost:1313/FCJ2024/v-cognito/identity-pools-sdk/manually/",
	"title": "Result",
	"tags": [],
	"description": "",
	"content": "In Process\u0026hellip; "
},
{
	"uri": "http://localhost:1313/FCJ2024/v-cognito/user-pools-api/result/",
	"title": "Result",
	"tags": [],
	"description": "",
	"content": "3. Result\n1. User pools Using the cognito default authenticate behavior, in the next lab i will try to do with other identity provider Sign-in experience Sign-up experience: Messaging App integration 2. Client pools NOTE there is s client secret but in this picture i turn it off, you should config cs. Default sign in page Default sign up page Authentication of Cognito default IP (Identity provider) After sign up and login in -\u0026gt; turn off the tab -\u0026gt; open another tab or session -\u0026gt; your session is the same and you cannot sign up again. -\u0026gt; your session has been captured. After success sign in you will be redict to \u0026ldquo;aws.training\u0026rdquo; page OpenID config https://cognito-idp.{region}.amazonaws.com/{userpoolid}/.well-known/openid-configuration\r"
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/",
	"title": "Web Services",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/FCJ2024/iv-cloudwatch/cloudwatch-asg/",
	"title": "CloudWatch Auto Scaling group",
	"tags": [],
	"description": "",
	"content": "Define CloudWatch Alarms for Autoscaling Groups\n# Autoscaling - Scaling Policy for High CPU\rresource \u0026#34;aws_autoscaling_policy\u0026#34; \u0026#34;high_cpu\u0026#34; {\rname = \u0026#34;high-cpu\u0026#34;\rscaling_adjustment = 4 adjustment_type = \u0026#34;ChangeInCapacity\u0026#34;\rcooldown = 300\rautoscaling_group_name = aws_autoscaling_group.my_asg.name }\r# Cloud Watch Alarm to trigger the above scaling policy when CPU Utilization is above 80%\r# Also send the notificaiton email to users present in SNS Topic Subscription\rresource \u0026#34;aws_cloudwatch_metric_alarm\u0026#34; \u0026#34;app1_asg_cwa_cpu\u0026#34; {\ralarm_name = \u0026#34;App1-ASG-CWA-CPUUtilization\u0026#34;\rcomparison_operator = \u0026#34;GreaterThanOrEqualToThreshold\u0026#34;\revaluation_periods = \u0026#34;2\u0026#34;\rmetric_name = \u0026#34;CPUUtilization\u0026#34;\rnamespace = \u0026#34;AWS/EC2\u0026#34;\rperiod = \u0026#34;120\u0026#34;\rstatistic = \u0026#34;Average\u0026#34;\rthreshold = \u0026#34;80\u0026#34;\rdimensions = {\rAutoScalingGroupName = aws_autoscaling_group.my_asg.name }\ralarm_description = \u0026#34;This metric monitors ec2 cpu utilization and triggers the ASG Scaling policy to scale-out if CPU is above 80%\u0026#34;\rok_actions = [aws_sns_topic.myasg_sns_topic.arn] alarm_actions = [\raws_autoscaling_policy.high_cpu.arn, aws_sns_topic.myasg_sns_topic.arn\r# trigger -\u0026gt; send email, scale the cpu up 4\r]\r} "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/5-auto_scaling/5.3-notification/",
	"title": "Create Auto Scaling Notification resource",
	"tags": [],
	"description": "",
	"content": " SNS resource SNS topic subscription resource Auto-scaling notification resource Create Simple notification service\n## SNS - Topic\rresource \u0026#34;aws_sns_topic\u0026#34; \u0026#34;myasg_sns_topic\u0026#34; {\rname = \u0026#34;myasg-sns-topic\u0026#34;\r}\r## SNS - Subscription\rresource \u0026#34;aws_sns_topic_subscription\u0026#34; \u0026#34;myasg_sns_topic_subscription\u0026#34; {\rtopic_arn = aws_sns_topic.myasg_sns_topic.arn\rprotocol = \u0026#34;email\u0026#34;\rendpoint = \u0026#34;WinterterminalLOGG@gmail.com\u0026#34;\r} Create auto-scaling notification rules\n## Create Autoscaling Notification Resource\rresource \u0026#34;aws_autoscaling_notification\u0026#34; \u0026#34;myasg_notifications\u0026#34; {\rgroup_names = [aws_autoscaling_group.my_asg.id]\rnotifications = [\r\u0026#34;autoscaling:EC2_INSTANCE_LAUNCH\u0026#34;,\r\u0026#34;autoscaling:EC2_INSTANCE_TERMINATE\u0026#34;,\r\u0026#34;autoscaling:EC2_INSTANCE_LAUNCH_ERROR\u0026#34;,\r\u0026#34;autoscaling:EC2_INSTANCE_TERMINATE_ERROR\u0026#34;,\r]\rtopic_arn = aws_sns_topic.myasg_sns_topic.arn } SNS topic subscription "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/2-prerequiste/2.1-createec2/2.1.3-createec2linux/",
	"title": "Create EC2 instances",
	"tags": [],
	"description": "",
	"content": "EC2 module:\nEC2 module 1. Declare AMI data:\n# Get latest AMI ID for Amazon Linux2 OS\rdata \u0026#34;aws_ami\u0026#34; \u0026#34;amzlinux2\u0026#34; {\rmost_recent = true\rowners = [ \u0026#34;amazon\u0026#34; ]\rfilter {\rname = \u0026#34;name\u0026#34;\rvalues = [ \u0026#34;amzn2-ami-hvm-*-gp2\u0026#34; ]\r}\rfilter {\rname = \u0026#34;root-device-type\u0026#34;\rvalues = [ \u0026#34;ebs\u0026#34; ]\r}\rfilter {\rname = \u0026#34;virtualization-type\u0026#34;\rvalues = [ \u0026#34;hvm\u0026#34; ]\r}\rfilter {\rname = \u0026#34;architecture\u0026#34;\rvalues = [ \u0026#34;x86_64\u0026#34; ]\r}\r} 2. Bastion instance:\nmodule \u0026#34;bastion-instance\u0026#34; {\rsource = \u0026#34;terraform-aws-modules/ec2-instance/aws\u0026#34;\rversion = \u0026#34;5.6.0\u0026#34;\rdepends_on = [ module.vpc]\rname = \u0026#34;bastion-instance\u0026#34;\rami = data.aws_ami.amzlinux2.id\rinstance_type = var.instance_type\rkey_name = var.instance_keypair\ruser_data = file(\u0026#34;${path.module}/jumpbox_install.sh\u0026#34;) #use for checking the db connection vpc_security_group_ids = [ module.bastion-secgroup.security_group_id]\rsubnet_id = module.vpc.public_subnets[0]\rtags = { name=\u0026#34;bastion-instance\u0026#34;}\r} Script for automatically execute in bastion instance -\u0026gt; install necessary components to connect to DB #! /bin/bash\rsudo yum update -y\rsudo rpm -e --nodeps mariadb-libs-*\rsudo amazon-linux-extras enable mariadb10.5 sudo yum clean metadata\rsudo yum install -y mariadb\rsudo mysql -V\rsudo yum install -y telnet EIP for remote ssh connection: resource \u0026#34;aws_eip\u0026#34; \u0026#34;eip1\u0026#34; {\rdepends_on = [ module.bastion-instance, module.vpc]\rtags = {name=\u0026#34;eip1\u0026#34;}\rinstance = module.bastion-instance.id\rdomain = \u0026#34;vpc\u0026#34;\r} 3. Private instances: (Simple way of creating private instances but in this lab we will you launch template instead)\n# module \u0026#34;private-instances\u0026#34; {\r# source = \u0026#34;terraform-aws-modules/ec2-instance/aws\u0026#34;\r# version = \u0026#34;5.6.0\u0026#34;\r# name = \u0026#34;private-instance\u0026#34;\r# depends_on = [ module.vpc ] # need to wait for vpc to be created completely\r# ami = data.aws_ami.amzlinux2.id\r# instance_type = var.instance_type\r# key_name = var.instance_keypair\r# user_data = file(\u0026#34;${path.module}/script.sh\u0026#34;)\r# #monitoring = true\r# vpc_security_group_ids = [module.private-secgroup.security_group_id]\r# #use for subnet [10.0.1.0/24,10.0.2.0/24]\r# for_each = toset([\u0026#34;0\u0026#34;, \u0026#34;1\u0026#34;]) #create multiple EC2 instances in each subnet\r# subnet_id = element(module.vpc.private_subnets, tonumber(each.key))\r# tags = {\r# name = \u0026#34;Web_Server\u0026#34;\r# }\r# } Script for automatically execute in private instance -\u0026gt; user_data Result "
},
{
	"uri": "http://localhost:1313/FCJ2024/iii-cloudhsm/",
	"title": "Hardware Security Module",
	"tags": [],
	"description": "",
	"content": "\rIn this lab because of lack of budged so i will only do 1 HSM in a cluster :)). I will do Manage the private keys of an issuing certificate authority (CA) locally. In process -\u0026gt; Encrypt and decrypt data with multiple cryptographic SDKs. JCE examples\nInformation\nHSM HSM module 1. Create HSM resource\n#create cluster\rresource \u0026#34;aws_cloudhsm_v2_cluster\u0026#34; \u0026#34;cloudhsm_v2_cluster\u0026#34; {\rhsm_type = \u0026#34;hsm1.medium\u0026#34;\rsubnet_ids = module.vpc.private_subnets\r#security group cannot be define before create so it much manually config\rtags = {\rName = \u0026#34;aws_cloudhsm_v2_cluster\u0026#34;\r}\r}\routput \u0026#34;cluster_id\u0026#34; {\rdescription = \u0026#34;CloudHSM V2 Cluster ID\u0026#34;\rvalue = aws_cloudhsm_v2_cluster.cloudhsm_v2_cluster.cluster_id\r} 2. Create HSM user\nCreate \u0026ldquo;hsmuser\u0026rdquo; to manage HSM cluster with HSM full privilege and AWS CLI control privilege for testing purpose 3. Initialize HSM cluster\nTo initialize the cluster, you must first create an HSM in the cluster #Create 1 hsm in subnet (10.0.1.0/24)\rresource \u0026#34;aws_cloudhsm_v2_hsm\u0026#34; \u0026#34;cloudhsm_v2_hsm\u0026#34; {\rsubnet_id = module.vpc.private_subnets[0]\rcluster_id = aws_cloudhsm_v2_cluster.cloudhsm_v2_cluster.cluster_id\r}\routput \u0026#34;hsm_id\u0026#34; {\rdescription = \u0026#34;CloudHSM V2 HSM ID\u0026#34;\rvalue = aws_cloudhsm_v2_hsm.cloudhsm_v2_hsm.id\r} 4. Download Cluster CSR\nSSH to bastion instance -\u0026gt; from bation instance type \u0026ldquo;aws configure\u0026rdquo; sign in using \u0026ldquo;hsmuser\u0026rdquo; credential and access key After that download Cluster CSR using AWS CLI command export HSM_CLUSTER_ID=...\raws cloudhsmv2 describe-clusters \\\r--filters clusterIds=$HSM_CLUSTER_ID \\\r--output text --query \u0026#39;Clusters[].Certificates.ClusterCsr\u0026#39; \u0026gt; myClusterCsr.csr 5. Create key, certificate \u0026amp; sign the CSR\nCreate a private key locally From the created Pri key, create a CA certificate openssl genrsa -aes256 -out CAPriKey.key 2024 openssl req -new -x509 -days 365 -key CAPriKey.key -out customerCA.crt Sign the CSR. Input is the downloaded HSM cluster CSR openssl x509 -req -days 365 -in myClusterCsr.csr -CA customerCA.crt -CAkey CAPriKey.key -CAcreateserial -out CustomerHsmCert.crt 6. Upload certificates to cluster\naws cloudhsmv2 initialize-cluster --cluster-id $HSM_CLUSTER_ID --signed-cert file://CustomerHsmCert.crt --trust-anchor file://customerCA.crt 7. Active the HSM cluster\nDownload and install HSM client wget https://s3.amazonaws.com/cloudhsmv2-software/CloudHsmClient/EL6/cloudhsm-client-latest.el6.x86_64.rpm\rsudo yum install ./cloudhsm-client-latest.el6.x86_64.rpm Edit client configuration by updating the HSM\u0026rsquo;s IP address sudo cp customerCA.crt /opt/cloudhsm/etc/customerCA.crt\rsudo /opt/cloudhsm/bin/configure -a HSM_IP 8. Login to the HSM cluster\nConfigure cloudhsm security group inbound and outbounf allow ec2 bastion/cluster from port 2225 Start the CloudHSM Mgmt Utility (CMU) CLI /opt/cloudhsm/bin/cloudhsm_mgmt_util /opt/cloudhsm/etc/cloudhsm_mgmt_util.cfg Login into HSM with PRECO user and change password loginHSM PRECO admin password\rlistUsers Change password -\u0026gt; now admin type changed from PRECO to CO "
},
{
	"uri": "http://localhost:1313/FCJ2024/v-cognito/user-pools-api/postman/",
	"title": "Postman",
	"tags": [],
	"description": "",
	"content": "Create tab call [CUP] 1. Get CUP token with /oauth2/token. click on the Authorisation item, then change the type to OAuth 2.0 Fill out the Authentication with the following: Callback URL will be: https://aws.training\nThe Auth URL’s will be: https://{your-cognito-domain}.auth.{your-region}.amazoncognito.com/oauth2/authorize\nand\nhttps://{your-cognito-domain}.auth.{your-region}.amazoncognito.com/oauth2/token\nThis can be found by navigating in Cognito console to App integration tab. Then in there, look for Cognito domain. The Client ID can be found by scrolling down in the App integration page to App client and analytics section. The ID will be listed next to your App client name.\nThen Press \u0026ldquo;Get New Access Token\u0026rdquo; at the bottom. This will pop up a mini browser requesting your credentials, use the credentials you created earlier to login and click Sign in. You will receive the Token ID and Access token: TOKEN ID ACCESS TOKEN "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/3-route53-and-acm/",
	"title": "Route53 and ACM",
	"tags": [],
	"description": "",
	"content": "\rYou must manually register for a domain on Route53 for this step.\nIn this step we will configure \u0026ldquo;Simple routing protocol\u0026rdquo; for Route53 and use ACM for managing SSL certificate.\nContent Application certificate manager module Route53 resource "
},
{
	"uri": "http://localhost:1313/FCJ2024/v-cognito/user-pools-sdk/",
	"title": "User-pool SDK",
	"tags": [],
	"description": "",
	"content": "In process \u0026hellip; "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/4-alb/",
	"title": "Application Load Balencer",
	"tags": [],
	"description": "",
	"content": "In this step, we will connect to our EC2 private servers to Application load balencer.\nContent Application load balencer module Create Security group for ALB module \u0026#34;alb-secgroup\u0026#34; {\rsource = \u0026#34;terraform-aws-modules/security-group/aws\u0026#34;\rversion = \u0026#34;5.1.0\u0026#34;\rname = \u0026#34;alb_secgroup\u0026#34;\rdescription = \u0026#34;Security group which is used as an argument in complete-sg\u0026#34;\rvpc_id = module.vpc.vpc_id\ringress_cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r# Website connection\ringress_rules = [\u0026#34;http-80-tcp\u0026#34;,\u0026#34;https-443-tcp\u0026#34;]\regress_rules = [\u0026#34;all-all\u0026#34;]\rtags = {\rname = \u0026#34;ALB Security Group\u0026#34;\r}\r} Create ALB: HTTP and HTTPS listener Target group for private instances \u0026ldquo;mytg1\u0026rdquo; ACM for managing public and private SSL/TLS X.509 certificates and keys that protect AWS websites and applications # Terraform AWS Application Load Balancer (ALB)\rmodule \u0026#34;alb\u0026#34; {\rdepends_on = [ module.vpc, module.master ]\rsource = \u0026#34;terraform-aws-modules/alb/aws\u0026#34;\rversion = \u0026#34;9.5.0\u0026#34;\rname = \u0026#34;alb\u0026#34;\rload_balancer_type = \u0026#34;application\u0026#34;\rvpc_id = module.vpc.vpc_id\rsubnets = module.vpc.public_subnets\rsecurity_groups = [module.alb-secgroup.security_group_id]\r# For example only\renable_deletion_protection = false\r# Listeners\rlisteners = {\r#HTTP redirect to HTTPS http_tcp_listeners = {\rport = 80\rprotocol = \u0026#34;HTTP\u0026#34;\raction_type = \u0026#34;redirect\u0026#34;\rredirect = {\rport = \u0026#34;443\u0026#34;\rprotocol = \u0026#34;HTTPS\u0026#34;\rstatus_code = \u0026#34;HTTP_301\u0026#34;\r}\r}#END of HTTP\r#HTTPS\rhttps_listeners = { # HTTPS Listener Index = 0 for HTTPS 443 port = 443\rprotocol = \u0026#34;HTTPS\u0026#34;\r#default ssl_policy = ELBSecurityPolicy-2016-08\rssl_policy = \u0026#34;ELBSecurityPolicy-TLS13-1-2-Res-2021-06\u0026#34;\rcertificate_arn = module.acm.acm_certificate_arn\raction_type = \u0026#34;fixed-response\u0026#34;\rforward = {\rtarget_group_key = \u0026#34;mytg1\u0026#34;\r}\rfixed-response = {\ractions = [{\rtype = \u0026#34;fixed-response\u0026#34;\rcontent_type = \u0026#34;text/plain\u0026#34;\rstatus_code = 200\rmessage_body = \u0026#34;This is a fixed response\u0026#34;\r}]\r}\r#RULES\rrules = {\rmyapp-rule = {\rpriority = 1\ractions = [{\rtype = \u0026#34;weighted-forward\u0026#34;\rtarget_groups = [\r{\rtarget_group_key = \u0026#34;mytg1\u0026#34;\rweight = 1\r}\r]\rstickiness = {\renabled = true\rduration = 3600\r}\r}]\rconditions = [{\rpath_pattern = {values = [\u0026#34;/*\u0026#34;]}\r}]\r}# End of myapp1-rule\r}#END of rules\r}# END HTTPS\r}\r# Target Groups\rtarget_groups = {\rmytg1 = { create_attachment = false name_prefix = \u0026#34;mytg1-\u0026#34;\rprotocol = \u0026#34;HTTP\u0026#34;\rport = 80\rtarget_type = \u0026#34;instance\u0026#34;\rderegistration_delay = 10\rload_balancing_cross_zone_enabled = false\rprotocol_version = \u0026#34;HTTP1\u0026#34;\rhealth_check = {\renabled = true\rinterval = 30\rpath = \u0026#34;/\u0026#34;\rport = \u0026#34;traffic-port\u0026#34;\rhealthy_threshold = 2\runhealthy_threshold = 2\rtimeout = 6\rprotocol = \u0026#34;HTTP\u0026#34;\rmatcher = \u0026#34;200-399\u0026#34;\r}\rtags = {name = \u0026#34;target group for alb\u0026#34;}\r} #mytg1\r}# END target_groups Block\r}#alb end "
},
{
	"uri": "http://localhost:1313/FCJ2024/iv-cloudwatch/",
	"title": "CloudWatch",
	"tags": [],
	"description": "",
	"content": "CloudWatch\nIn this lab i will use cloudwatch with ALB, auto-scaling, SNS and Synthetics canaries for my web page on \u0026ldquo;https://apps.langocanh.net\u0026rdquo; all logs will be store in S3 bucket.\n"
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/5-auto_scaling/5.4-scale_policies/",
	"title": "Create Auto Scaling Scale policies",
	"tags": [],
	"description": "",
	"content": " Auto scaling scale policies resource TTS - Scaling Policy-1: Based on CPU Utilization\n# Define Autoscaling Policies and Associate them to Autoscaling Group\rresource \u0026#34;aws_autoscaling_policy\u0026#34; \u0026#34;avg_cpu_policy_greater_than_xx\u0026#34; {\rname = \u0026#34;avg-cpu-policy-greater-than-xx\u0026#34;\rpolicy_type = \u0026#34;TargetTrackingScaling\u0026#34; # Important Note: The policy type, either \u0026#34;SimpleScaling\u0026#34;, \u0026#34;StepScaling\u0026#34; or \u0026#34;TargetTrackingScaling\u0026#34;. If this value isn\u0026#39;t provided, AWS will default to \u0026#34;SimpleScaling.\u0026#34; autoscaling_group_name = aws_autoscaling_group.my_asg.id estimated_instance_warmup = 180 # defaults to ASG default cooldown 300 seconds if not set\r# CPU Utilization is above 50\rtarget_tracking_configuration {\rpredefined_metric_specification {\rpredefined_metric_type = \u0026#34;ASGAverageCPUUtilization\u0026#34;\r}\rtarget_value = 50.0\r} } TTS - Scaling Policy-2: Based on ALB Target Requests\nresource \u0026#34;aws_autoscaling_policy\u0026#34; \u0026#34;alb_target_requests_greater_than_yy\u0026#34; {\rname = \u0026#34;alb-target-requests-greater-than-yy\u0026#34;\rpolicy_type = \u0026#34;TargetTrackingScaling\u0026#34; #default \u0026#34;Simplescaling\u0026#34;\rautoscaling_group_name = aws_autoscaling_group.my_asg.id estimated_instance_warmup = 120 # defaults to ASG default cooldown 300 seconds if not set # Number of requests \u0026gt; 10 completed per target in an Application Load Balancer target group. target_tracking_configuration {\r# default metric specification\rpredefined_metric_specification {\rpredefined_metric_type = \u0026#34;ALBRequestCountPerTarget\u0026#34;\rresource_label = \u0026#34;${module.alb.arn_suffix}/${module.alb.target_groups[\u0026#34;mytg1\u0026#34;].arn_suffix}\u0026#34; } target_value = 10.0\r} } "
},
{
	"uri": "http://localhost:1313/FCJ2024/v-cognito/user-pools-api/restrict_api/",
	"title": "Restricting API access with API gateway",
	"tags": [],
	"description": "",
	"content": "In process\u0026hellip; "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/5-auto_scaling/",
	"title": "Auto Scaling",
	"tags": [],
	"description": "",
	"content": "In this section, we will proceed to create an auto-scaling service\nContent: Lauch template Auto Scaling Auto Scaling notification Auto Scaling scale policies "
},
{
	"uri": "http://localhost:1313/FCJ2024/v-cognito/",
	"title": "AWS Cognito",
	"tags": [],
	"description": "",
	"content": "Reference\nAWS Cognito\n"
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/6-kms/",
	"title": "Key management service",
	"tags": [],
	"description": "",
	"content": "Key management service\nKMS module\nCreating Single-region key symmetric key for encrypting RDS database Create IAM user to manage Key\n#allow access to key by \u0026#34;kmsuser\u0026#34;\rdata \u0026#34;aws_iam_policy_document\u0026#34; \u0026#34;rds_key\u0026#34; {\r#This statement allows all users and services in this account to execute all KMS actions on this key\rstatement {\rsid = \u0026#34;Enable IAM User Permissions\u0026#34;\reffect = \u0026#34;Allow\u0026#34;\ractions = [\u0026#34;kms:*\u0026#34;]\rresources = [\u0026#34;*\u0026#34;]\rprincipals {\rtype = \u0026#34;AWS\u0026#34;\ridentifiers = [\u0026#34;arn:aws:iam::${local.account_id}:root\u0026#34;]\r}\r}\r#This statement allows selected individual users and IAM roles to fully manage this key. #This statement must exist for every single key. Without this statement you will absolutely lose access and management of this key.\rstatement {\rsid = \u0026#34;Allow access for Key Administrators\u0026#34;\reffect = \u0026#34;Allow\u0026#34;\ractions = [\u0026#34;kms:*\u0026#34;]\rresources = [\u0026#34;*\u0026#34;]\rprincipals {\rtype = \u0026#34;AWS\u0026#34;\ridentifiers = [\r\u0026#34;arn:aws:iam::${local.account_id}:user/${local.key_user}\u0026#34;,\r\u0026#34;arn:aws:iam::${local.account_id}:role/aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport\u0026#34;,\r\u0026#34;arn:aws:iam::${local.account_id}:role/aws-service-role/trustedadvisor.amazonaws.com/AWSServiceRoleForTrustedAdvisor\u0026#34;\r]\r}\r}\r#This statement is specifically for the usage of the key. #If you do not provide the statement Enable IAM User Permissions then you must include this statement; #Otherwise this key will not be usable by anyone besides the key administrators.\rstatement {\rsid = \u0026#34;Allow use of the key\u0026#34;\reffect = \u0026#34;Allow\u0026#34;\ractions = [\r\u0026#34;kms:Encrypt\u0026#34;,\r\u0026#34;kms:Decrypt\u0026#34;,\r\u0026#34;kms:ReEncrypt*\u0026#34;,\r\u0026#34;kms:GenerateDataKey*\u0026#34;,\r\u0026#34;kms:DescribeKey\u0026#34;\r]\rresources = [\u0026#34;*\u0026#34;]\rprincipals {\rtype = \u0026#34;AWS\u0026#34;\ridentifiers = [\r\u0026#34;arn:aws:iam::${local.account_id}:user/${local.key_user}\u0026#34;,\r\u0026#34;arn:aws:iam::${local.account_id}:role/aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport\u0026#34;,\r\u0026#34;arn:aws:iam::${local.account_id}:role/aws-service-role/trustedadvisor.amazonaws.com/AWSServiceRoleForTrustedAdvisor\u0026#34;\r]\r}\r}\r#This statement allows listing, creating, and revoking grants for the key by the principals identified in the statement.\rstatement {\rsid = \u0026#34;Allow attachment of persistent resources\u0026#34;\reffect = \u0026#34;Allow\u0026#34;\ractions = [\r\u0026#34;kms:CreateGrant\u0026#34;,\r\u0026#34;kms:ListGrants\u0026#34;,\r\u0026#34;kms:RevokeGrant\u0026#34;\r]\rresources = [\u0026#34;*\u0026#34;]\rprincipals {\rtype = \u0026#34;AWS\u0026#34;\ridentifiers = [\r\u0026#34;arn:aws:iam::${local.account_id}:user/${local.key_user}\u0026#34;,\r\u0026#34;arn:aws:iam::${local.account_id}:role/aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport\u0026#34;,\r\u0026#34;arn:aws:iam::${local.account_id}:role/aws-service-role/trustedadvisor.amazonaws.com/AWSServiceRoleForTrustedAdvisor\u0026#34;\r]\r}\rcondition {\rtest = \u0026#34;Bool\u0026#34;\rvariable = \u0026#34;kms:GrantIsForAWSResource\u0026#34;\rvalues = [\u0026#34;true\u0026#34;]\r}\r}\r} KMS module\nmodule \u0026#34;kms\u0026#34; {\rsource = \u0026#34;terraform-aws-modules/kms/aws\u0026#34;\rversion = \u0026#34;2.2.1\u0026#34;\raliases = [ \u0026#34;rds_kms\u0026#34; ]\rdeletion_window_in_days = 7 # for testing\rdescription = \u0026#34;Complete key example showing various configurations available\u0026#34;\renable_key_rotation = false # for testing is_enabled = true\rkey_usage = \u0026#34;ENCRYPT_DECRYPT\u0026#34;\rmulti_region = false\rpolicy = data.aws_iam_policy_document.rds_key.json tags = {\rName = \u0026#34;rds_kms\u0026#34;\r}\r} "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/7-rds/7.2rds/",
	"title": "RDS MYSQL",
	"tags": [],
	"description": "",
	"content": " RDS variable\n# DB Name\rvariable \u0026#34;db_name\u0026#34; {\rdescription = \u0026#34;AWS RDS Database Name\u0026#34;\rtype = string\r}\r# DB Instance Identifier\rvariable \u0026#34;db_instance_identifier\u0026#34; {\rdescription = \u0026#34;AWS RDS Database Instance Identifier\u0026#34;\rtype = string\r}\r# DB Username - Enable Sensitive flag\rvariable \u0026#34;db_username\u0026#34; {\rdescription = \u0026#34;AWS RDS Database Administrator Username\u0026#34;\rtype = string\r}\r# DB Password - Enable Sensitive flag\rvariable \u0026#34;db_password\u0026#34; {\rdescription = \u0026#34;AWS RDS Database Administrator Password\u0026#34;\rtype = string\rsensitive = true\r} Automating variable assign\n# RDS Database Variables\rdb_instance_identifier = \u0026#34;masterdb\u0026#34;\rdb_name = \u0026#34;mywebdb\u0026#34;\rdb_username = \u0026#34;mydbadmin\u0026#34;\rdb_password = \u0026#34;mydbpass03\u0026#34; Master DB module\n################################################################################\r# Master DB\r################################################################################\r# Create AWS RDS Database\rmodule \u0026#34;master\u0026#34; {\rsource = \u0026#34;terraform-aws-modules/rds/aws\u0026#34;\rversion = \u0026#34;6.3.0\u0026#34;\r#kms_key_id = identifier = var.db_instance_identifier #masterdb\rdb_name = var.db_name #mywebdb\rusername = var.db_username\rpassword = var.db_password\rmanage_master_user_password = false # not using secret manager\rmulti_az = false # not using standby instance\rcreate_db_subnet_group = true subnet_ids = module.vpc.database_subnets\rvpc_security_group_ids = [module.rdsdb_sg.security_group_id]\rport = 3306\rengine = \u0026#34;mysql\u0026#34;\rengine_version = \u0026#34;8.0.35\u0026#34;\rfamily = \u0026#34;mysql8.0\u0026#34; # DB parameter group\rmajor_engine_version = \u0026#34;8.0\u0026#34; # DB option group\rinstance_class = \u0026#34;db.t4g.micro\u0026#34;\rallocated_storage = 10\rmax_allocated_storage = 20\r# maintenance_window = \u0026#34;Mon:00:00-Mon:03:00\u0026#34;\r# backup_window = \u0026#34;03:00-06:00\u0026#34;\r# enabled_cloudwatch_logs_exports = [\u0026#34;general\u0026#34;]\rbackup_retention_period = 7\rskip_final_snapshot = true\rdeletion_protection = false\rstorage_encrypted = true\rkms_key_id = module.kms.key_arn #KMS key for storage encryption\r# performance_insights_enabled = true\r# performance_insights_retention_period = 7\r# create_monitoring_role = true\r# monitoring_interval = 60\rparameters = [\r{\rname = \u0026#34;character_set_client\u0026#34;\rvalue = \u0026#34;utf8\u0026#34;\r},\r{\rname = \u0026#34;character_set_server\u0026#34;\rvalue = \u0026#34;utf8\u0026#34;\r}\r]\rtags = {name = \u0026#34;master_mysql\u0026#34;}\rdb_instance_tags = {\r\u0026#34;Sensitive\u0026#34; = \u0026#34;high\u0026#34;\r}\rdb_option_group_tags = {\r\u0026#34;Sensitive\u0026#34; = \u0026#34;low\u0026#34;\r}\rdb_parameter_group_tags = {\r\u0026#34;Sensitive\u0026#34; = \u0026#34;low\u0026#34;\r}\rdb_subnet_group_tags = {\r\u0026#34;Sensitive\u0026#34; = \u0026#34;high\u0026#34;\r}\r} Read replication DB module\n################################################################################\r# Replica DB\r################################################################################\rmodule \u0026#34;replica\u0026#34; {\rsource = \u0026#34;terraform-aws-modules/rds/aws\u0026#34;\rversion = \u0026#34;6.4.0\u0026#34;\ridentifier = \u0026#34;replicadb\u0026#34;\r# Source database. For cross-region use db_instance_arn\rreplicate_source_db = module.master.db_instance_identifier\rengine = \u0026#34;mysql\u0026#34;\rengine_version = \u0026#34;8.0.35\u0026#34;\rfamily = \u0026#34;mysql8.0\u0026#34; # DB parameter group\rmajor_engine_version = \u0026#34;8.0\u0026#34; # DB option group\rinstance_class = \u0026#34;db.t4g.micro\u0026#34;\rallocated_storage = 10\rmax_allocated_storage = 20\rport = 3306\rusername = var.db_username\rpassword = var.db_password\r# Not supported with replicas\rmanage_master_user_password = false\rmulti_az = false\rvpc_security_group_ids = [module.rdsdb_sg.security_group_id]\rsubnet_ids = [module.vpc.database_subnets[1]]\r# maintenance_window = \u0026#34;Tue:00:00-Tue:03:00\u0026#34;\r# backup_window = \u0026#34;03:00-06:00\u0026#34;\r# enabled_cloudwatch_logs_exports = [\u0026#34;general\u0026#34;]\rbackup_retention_period = 0\rskip_final_snapshot = true\rdeletion_protection = false\rstorage_encrypted = true\rkms_key_id = module.kms.key_arn #KMS key for storage encryption\rtags = { name = \u0026#34;replica_mysql\u0026#34; }\rparameters = [\r{\rname = \u0026#34;character_set_client\u0026#34;\rvalue = \u0026#34;utf8mb4\u0026#34;\r},\r{\rname = \u0026#34;character_set_server\u0026#34;\rvalue = \u0026#34;utf8mb4\u0026#34;\r}]\rdb_instance_tags = { \u0026#34;Sensitive\u0026#34; = \u0026#34;high\u0026#34; }\rdb_option_group_tags = { \u0026#34;Sensitive\u0026#34; = \u0026#34;low\u0026#34; }\rdb_parameter_group_tags = { \u0026#34;Sensitive\u0026#34; = \u0026#34;low\u0026#34; }\rdb_subnet_group_tags = { \u0026#34;Sensitive\u0026#34; = \u0026#34;high\u0026#34; }\r} "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/7-rds/",
	"title": "RDS MYSQL database",
	"tags": [],
	"description": "",
	"content": " Content RDS security group RDS module "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/8-results/",
	"title": "Results",
	"tags": [],
	"description": "",
	"content": " EC2 instances: SSH connection from bation instance to private instance Auto scaling: launch template ALB: listerners and rules: target group: KMS: policy and cryptographic configuration: RDS database: Database storage enryption with KMS key: PHP web service test run\nSimple website for testing fucntion input and output from the RDS database Website before entering more value Database before entering more value\nSSH into bastion instance -\u0026gt; run command to login to MYSQL sever on port 3306 mysql -h RDS_ENDPOINT -u DBADMIN -pDB_PASSWORD Website after entering more value Database after entering more value "
},
{
	"uri": "http://localhost:1313/FCJ2024/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/3-route53-and-acm/3.2-acm/",
	"title": "Create ACM",
	"tags": [],
	"description": "",
	"content": "AWS Certificate Manage\nACM module\nACM module to create and verify SSL certificate\nmodule \u0026#34;acm\u0026#34; {\rsource = \u0026#34;terraform-aws-modules/acm/aws\u0026#34;\rversion = \u0026#34;5.0.0\u0026#34;\rdomain_name = trimsuffix(data.aws_route53_zone.mydomain.name, \u0026#34;.\u0026#34;)\rzone_id = data.aws_route53_zone.mydomain.zone_id subject_alternative_names = [\r\u0026#34;*.langocanh.net\u0026#34;\r]\rtags = { name = \u0026#34;application certificate manager\u0026#34;}\r# Validation Method\rvalidation_method = \u0026#34;DNS\u0026#34;\rwait_for_validation = true }\r# Output ACM Certificate ARN\routput \u0026#34;acm_certificate_arn\u0026#34; {\rdescription = \u0026#34;The ARN of the certificate\u0026#34;\rvalue = module.acm.acm_certificate_arn\r} "
},
{
	"uri": "http://localhost:1313/FCJ2024/ii-web_services/3-route53-and-acm/3.1-route53/",
	"title": "Create Route53",
	"tags": [],
	"description": "",
	"content": "Simple routing policy\n#Simple routing policy\rresource \u0026#34;aws_route53_record\u0026#34; \u0026#34;apps_dns\u0026#34; {\rzone_id = data.aws_route53_zone.mydomain.zone_id name = \u0026#34;apps.langocanh.net\u0026#34;\rtype = \u0026#34;A\u0026#34;\ralias {\rname = module.alb.dns_name\rzone_id = module.alb.zone_id\revaluate_target_health = true\r} } "
},
{
	"uri": "http://localhost:1313/FCJ2024/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]